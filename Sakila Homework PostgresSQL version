--1a view first & last names of all actor table
SELECT first_name, last_name FROM actor;

--1b capitalize first & last names
UPDATE actor SET first_name = UPPER(first_name)
UPDATE actor SET last_name = UPPER(last_name);
--combine first & last names into one column
SELECT concat(first_name, last_name) as actor_name from actor;

--2a first all actors with first name 'CHRISTOPHER'
SELECT * FROM actor WHERE first_name = 'CHRISTOPHER';

--2b actors whose last name contains letters 'GEN'
SELECT * FROM actor WHERE last_name LIKE '%GEN%';

--2c actors whose last name contains letters 'LI'
SELECT * FROM actor WHERE last_name LIKE '%LI%' 
ORDER BY last_name, first_name;

--2d display ID & country of 3
SELECT country_id, country FROM country WHERE country IN('Afghanistan', 'Bangladesh', 'China');

--3a add 'middle_name' column to actor table
ALTER TABLE actor
ADD COLUMN middle_name VARCHAR(45); 
--PostgresSQL has no option to specify position of new column

---3b change last name data type to BLOBS
ALTER TABLE actor 
ALTER COLUMN last_name TYPE BLOBS;
--PostgresSQL does not support BLOB data type

--3c delete 'middle_name' column from actor table
ALTER TABLE actor DROP middle_name;

--4a list last names and count of last names
SELECT last_name, COUNT(last_name)
FROM actor
GROUP BY last_name
ORDER BY last_name;

--4b list last names and count of last names with minimum of 2
SELECT last_name, COUNT(last_name)
FROM actor
GROUP BY last_name
HAVING COUNT (last_name)>1
ORDER BY last_name;

--4c replace GROUCHO WILLIAMS with HARPO WILLIAMS
UPDATE actor SET first_name = REPLACE (first_name, 'GROUCHO', 'HARPO')
SELECT first_name, last_name FROM actor
ORDER by last_name;

--4d replace first name HARPO to GROUCHO , otherwise MUCHO GROUCHO

--5a recreate schema of address table
CREATE TABLE address_template (
	address_id SERIAL PRIMARY KEY NOT NULL,
	address VARCHAR (50) NOT NULL,
	address2 VARCHAR (50),
	district VARCHAR (20) NOT NULL,
	city_id INTEGER NOT NULL,
	postal_code INTEGER NOT NULL,
	phone INTEGER NOT NULL,
	last_update TIMESTAMP WITH TIME ZONE NOT NULL
	);

--6a join first name, last name, & address using staff & address tables
SELECT staff.*, address.address
FROM staff, address 
WHERE staff.address_id = address.address_id;

--6b join staff & payment tables and sum payment amounts
SELECT staff.staff_id, staff.first_name, staff.last_name, sum(payment.amount) AS total_amount
FROM staff 
INNER JOIN payment 
ON staff.staff_id = payment.staff_id
GROUP BY staff.staff_id;

--6c list films and number of actors
SELECT film.film_id, film.title, COUNT(film_actor.actor_id) AS total_actors
FROM film_actor 
INNER JOIN film  
ON film.film_id = film_actor.film_id
GROUP BY film.film_id
ORDER BY title;

--6d number of 'Hunchback Impossible' films in inventory
SELECT * FROM film WHERE title = 'Hunchback Impossible';
SELECT * FROM inventory WHERE film_id = 439;

SELECT inventory.inventory_id, inventory.film_id, inventory.store_id
FROM inventory
JOIN film
ON (inventory.film_id = film.film_id)
WHERE film.title = 'Hunchback Impossible';

--6e total payment by customer last name alphabetically
SELECT customer.customer_id, customer.first_name, customer.last_name, SUM(payment.amount) AS total_payment
FROM payment 
INNER JOIN customer  
ON customer.customer_id = payment.customer_id
GROUP BY customer.customer_id 
ORDER BY customer.last_name;

--7a subqueries to display movies starting with letters K & Q and in English
SELECT film_id, title, language_id FROM film
WHERE title LIKE 'K%' or title LIKE 'Q%'
	AND (SELECT language_id IN
		(SELECT language_id FROM language WHERE name = 'English'))
		ORDER BY film_id;
	
--7b subqueries to display all actor in film 'Alone Trip'
SELECT actor_id, first_name, last_name FROM actor
WHERE actor_id IN
	(SELECT actor_id FROM film_actor WHERE film_id IN
	 	(SELECT film_id FROM film WHERE title = 'Alone Trip'))
		ORDER BY actor_id;

--7c name & emails of all Canadian customers using join
SELECT customer_id, first_name, last_name, email FROM customer
JOIN address ON (customer.address_id = address.address_id)
JOIN city ON (address.city_id = city.city_id)
JOIN country ON (city.country_id = country.country_id)
WHERE country.country = 'Canada'
ORDER BY customer_id;

--7d all movies categorized as family films
SELECT title FROM film
JOIN film_category ON (film.film_id = film_category.film_id)
JOIN category ON (film_category.category_id = category.category_id)
WHERE category.name = 'Family'
ORDER BY title;

--7e most rented movies in descending order
SELECT film_id, title, rental_duration FROM film
ORDER BY rental_duration DESC;

--7f how much revenue per store
SELECT * FROM sales_by_store;

--7g display store ID, city, & country for each store
SELECT store.store_id, city.city, country.country
FROM store, address, city, country
WHERE store.address_id = address.address_id
AND address.city_id = city.city_id
AND city.country_id = country.country_id;

--7h list gross revenue in descending order of top 5 genres 
SELECT category.category_id, category.name, SUM(payment.amount) AS gross_revenue
FROM payment 
INNER JOIN rental ON payment.rental_id = rental.rental_id
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
INNER JOIN film_category ON film_category.film_id = inventory.film_id
INNER JOIN category ON category.category_id = film_category.category_id
GROUP BY category.category_id
ORDER BY gross_revenue
DESC LIMIT 5;

--8a create view for item 7h
CREATE VIEW top_5_grossing_genres AS
SELECT category.category_id, category.name, SUM(payment.amount) AS gross_revenue
FROM payment 
INNER JOIN rental ON payment.rental_id = rental.rental_id
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
INNER JOIN film_category ON film_category.film_id = inventory.film_id
INNER JOIN category ON category.category_id = film_category.category_id
GROUP BY category.category_id
ORDER BY gross_revenue
DESC LIMIT 5;

--8b display view created for item 8a
SELECT * FROM top_5_grossing_genres;

--8c delete view created for item 8a
DROP VIEW top_5_grossing_genres;
